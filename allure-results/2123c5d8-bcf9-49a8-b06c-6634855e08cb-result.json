{"name": "test_login_page_external", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=connectionFailure&u=http%3A//192.168.0.207%3A8081/&c=UTF-8&d=Firefox%20%D0%BD%D0%B5%20%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%20%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%B8%D1%82%D1%8C%20%D1%81%D0%BE%D0%B5%D0%B4%D0%B8%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D1%81%20%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%BE%D0%BC%20192.168.0.207%3A8081.\nStacktrace:\nWebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:188:5\nUnknownError@chrome://remote/content/shared/webdriver/Errors.jsm:515:5\ncheckReadyState@chrome://remote/content/marionette/navigate.js:67:24\nonNavigation@chrome://remote/content/marionette/navigate.js:335:39\nemit@resource://gre/modules/EventEmitter.jsm:162:20\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteEventsParent.jsm:45:25", "trace": "request = <SubRequest 'browser' for <Function test_login_page_external>>\n\n    @pytest.fixture\n    def browser(request):\n        browser_name = request.config.getoption(\"--browser\")\n        drivers = request.config.getoption(\"--drivers\")\n        url = request.config.getoption(\"--url\")\n        log_level = request.config.getoption(\"--log_level\")\n    \n        logger = logging.getLogger(request.node.name)\n        file_handler = logging.FileHandler(f\"logs/{request.node.name}.log\")\n        file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))\n        logger.addHandler(file_handler)\n        logger.setLevel(level=log_level)\n    \n        logger.info(\"===> Test {} started at {}\".format(request.node.name, datetime.datetime.now()))\n    \n        if browser_name == \"firefox\":\n            driver = webdriver.Firefox(executable_path=f\"{drivers}/geckodriver\")\n        elif browser_name == \"chrome\":\n            driver = webdriver.Chrome(executable_path=f\"{drivers}/chromedriver\")\n        elif browser_name == \"edge\":\n            driver = webdriver.Edge(executable_path=f\"{drivers}/msedgedriver\")\n        elif browser_name == \"opera\":\n            driver = webdriver.Opera(executable_path=f\"{drivers}/operadriver\")\n        else:\n            raise ValueError(\"Browser not supported!\")\n    \n        driver.log_level = log_level\n        driver.logger = logger\n        driver.test_name = request.node.name\n    \n    #    logger.info(\"Browser:{}\".format(browser.desired_capabilities))\n        driver.maximize_window()\n    \n        def fin():\n            driver.quit()\n            logger.info(\"===> Test {} finished at {}\".format(request.node.name, datetime.datetime.now()))\n    \n        request.addfinalizer(fin)\n    \n>       driver.get(url)\n\nconftest.py:60: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:437: in get\n    self.execute(Command.GET, {'url': url})\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f9fb837b2b0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Reached error page: about:neterror?e=connection...tEmitter.jsm:162:20\\\\nreceiveMessage@chrome://remote/content/marionette/actors/MarionetteEventsParent.jsm:45:25\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Reached error page: about:neterror?e=connectionFailure&u=http%3A//192.168.0.207%3A8081/&c=UTF-8&d=Firefox%20%D0%BD%D0%B5%20%D0%BC%D0%BE%D0%B6%D0%B5%D1%82%20%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%B8%D1%82%D1%8C%20%D1%81%D0%BE%D0%B5%D0%B4%D0%B8%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5%20%D1%81%20%D1%81%D0%B5%D1%80%D0%B2%D0%B5%D1%80%D0%BE%D0%BC%20192.168.0.207%3A8081.\nE       Stacktrace:\nE       WebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:188:5\nE       UnknownError@chrome://remote/content/shared/webdriver/Errors.jsm:515:5\nE       checkReadyState@chrome://remote/content/marionette/navigate.js:67:24\nE       onNavigation@chrome://remote/content/marionette/navigate.js:335:39\nE       emit@resource://gre/modules/EventEmitter.jsm:162:20\nE       receiveMessage@chrome://remote/content/marionette/actors/MarionetteEventsParent.jsm:45:25\n\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:247: WebDriverException"}, "attachments": [{"name": "log", "source": "f5d5f100-c53e-4013-9c83-4d3083007182-attachment.txt", "type": "text/plain"}], "start": 1664552295185, "stop": 1664552295185, "uuid": "f56bcec3-0e7b-4c2c-a0f0-269f4bcb1d0b", "historyId": "cdb8371fdc03643d0a230b0c35ba52a4", "testCaseId": "7844bf09b6f1528b61461558476d331b", "fullName": "tests.test_admin_page#test_login_page_external", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_admin_page"}, {"name": "host", "value": "lin-Lenovo-B570e"}, {"name": "thread", "value": "79740-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_admin_page"}]}