{"name": "test_product_page_external", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message:", "trace": "browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"bd2441a1-da33-4e13-995f-1b1aae259e2a\")>\nurl = 'http://192.168.0.207:8081/'\n\n    def test_product_page_external(browser, url):\n        product_page = ProductPage(browser)\n>       product_page.open(url)\n\ntests/test_product_page.py:7: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage_objects/product_page.py:12: in open\n    self.browser.get(url + self.path)\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:437: in get\n    self.execute(Command.GET, {'url': url})\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f854ff3d130>\nresponse = {'status': [13, 'unknown error'], 'value': ''}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n>           raise exception_class(value)\nE           selenium.common.exceptions.WebDriverException: Message:\n\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:211: WebDriverException"}, "steps": [{"name": "Открытие продукта nikon-d300", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: \n\n", "trace": "  File \"/home/lin/Develop/setup_selenium/venv/lib/python3.8/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/home/lin/Develop/setup_selenium/page_objects/product_page.py\", line 12, in open\n    self.browser.get(url + self.path)\n  File \"/home/lin/Develop/setup_selenium/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 437, in get\n    self.execute(Command.GET, {'url': url})\n  File \"/home/lin/Develop/setup_selenium/venv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 425, in execute\n    self.error_handler.check_response(response)\n  File \"/home/lin/Develop/setup_selenium/venv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py\", line 211, in check_response\n    raise exception_class(value)\n"}, "parameters": [{"name": "url", "value": "'http://192.168.0.207:8081/'"}], "start": 1667760545803, "stop": 1667760635819}], "attachments": [{"name": "log", "source": "14199f20-1803-4685-956b-b313759fd103-attachment.txt", "type": "text/plain"}], "start": 1667760545802, "stop": 1667760635836, "uuid": "772a50e7-c8e0-416d-9da5-ad79e84a8c13", "historyId": "1fee9fa7de4098537417e6cd933bd540", "testCaseId": "fc419b4866ef76682cb94f93a44d145c", "fullName": "tests.test_product_page#test_product_page_external", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_product_page"}, {"name": "host", "value": "lin-Lenovo-B570e"}, {"name": "thread", "value": "15677-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_product_page"}]}